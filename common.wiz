import "ram";
import "nes";
import "data";

#[fallthrough] func call_t0() {
    goto *(&t0 as *func);
}

func clear_nametable_vram() {
    a = nes.ppu.status;
    nes.ppu.address = a = >:nes.ppu.ADDRESS_NAMETABLE_DATA;
    nes.ppu.address = a = <:nes.ppu.ADDRESS_NAMETABLE_DATA;
    a = 0;

    for y in 8 .. 1 by -1 {
        for x in 0 .. 255 {
            nes.ppu.data = a;
        }
    }
}

//NAMETABLE_A | (((y) << 5) | (x))
//NTADR_A(tmp3, tmp2)

func escrever_tile(x_tile : u8 in t0, y_tile : u8 in t1, num_tile : u8 in t2) {
  var offset_low : u8 in t3;
  var temp : u8 in t4;

  //Guardar y_tile deslocado de três bits pra quando formos somar no byte mais significativo
  temp = a = y_tile >>> 3;
  
  //Três bits menos significativos de Y são somados no byte menos significativo do resultado
  a = y_tile <<< 5;
  offset_low = a |= x_tile;

  nes.ppu.address = a = 0x20 | temp;
  nes.ppu.address = a = offset_low;

  nes.ppu.data = a = num_tile;
}


func load_tilemap() {
    let START_X = 0;
    let START_Y = 0;

    a = nes.ppu.status;

    for x in 0 .. 239 {
        var x_tile : u8 in escrever_tile.x_tile;
        var y_tile : u8 in escrever_tile.y_tile;
        var num_tile : u8 in escrever_tile.num_tile;
        x_tile = a = (x & 15) << 1;
        y_tile = a = (x >>> 4) << 1;

        
        b0 = a = data.level1[x];
        y = a = b0 << 2;
        num_tile = a = data.ts1[y];;
        escrever_tile(x_tile,y_tile,num_tile);
        ++x_tile;
        ++y;
        num_tile = a = data.ts1[y];
        escrever_tile(x_tile,y_tile,num_tile);
        ++y_tile;
        ++y;
        num_tile = a = data.ts1[y];
        escrever_tile(x_tile,y_tile,num_tile);
        ++x_tile;
        ++y;
        num_tile = a = data.ts1[y];
        escrever_tile(x_tile,y_tile,num_tile);
    }
}

func load_palette() {
    a = nes.ppu.status;
    nes.ppu.address = a = >:nes.ppu.ADDRESS_PALETTE_DATA;
    nes.ppu.address = a = <:nes.ppu.ADDRESS_PALETTE_DATA;

    for x in 0 .. (nes.ppu.PALETTE_SIZE * nes.ppu.PALETTE_COUNT) - 1 {
        nes.ppu.data = a = data.palette[x];
    }
}

func print_text() {
    let START_X = 10;
    let START_Y = 3;
    let TILE_ADDRESS = nes.ppu.ADDRESS_NAMETABLE_DATA + START_Y * 32 + START_X;
    
    // Read PPU status to reset its state.
    a = nes.ppu.status;
    // Now setup the PPU for copying tiles.
    nes.ppu.address = a = >:TILE_ADDRESS;
    nes.ppu.address = a = <:TILE_ADDRESS;
    
    x = 0;

    while { a = data.message[x]; } && !zero {
        x++;
        nes.ppu.data = a;
    }
}